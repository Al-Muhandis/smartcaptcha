unit testsmartcaptcha;

{$mode ObjFPC}{$H+}

interface

uses
  Classes, SysUtils, fpcunit, testregistry, smartcaptcha, smartcaptcha_config, smartcaptcha_types, fpjson, fgl
  ;

type
  TSmartCaptchaTest = class(TTestCase)
  private
    FClient: TSmartCaptcha;
    FLogMessages: TStringList;
    FLogLevels: specialize TFPGList<TEventType>;
    procedure OnLogEvent({%H-}Sender: TObject; Level: TEventType; const Message: string);
  protected
    procedure SetUp; override;
    procedure TearDown; override;
  published
    // –¢–µ—Å—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    procedure TestConfigValidation;
    procedure TestConfigWithValidKey;
    procedure TestConfigDefaults;
    procedure TestConfigTimeouts;

    // –¢–µ—Å—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤
    procedure TestEmptyToken;
    procedure TestWhitespaceToken;
    procedure TestVeryLongToken;
    procedure TestSpecialCharactersInToken;

    // –¢–µ—Å—Ç—ã IP –∞–¥—Ä–µ—Å–æ–≤
    procedure TestWithValidIP;
    procedure TestWithInvalidIP;
    procedure TestWithEmptyIP;
    procedure TestWithIPv6;

    // –¢–µ—Å—Ç—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    procedure TestLoggingEnabled;
    procedure TestLoggingDisabled;
    procedure TestDifferentLogLevels;

    // –¢–µ—Å—Ç—ã –æ—à–∏–±–æ–∫
    procedure TestLastErrorInitialization;
    procedure TestLastErrorPersistence;

    // –¢–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
    procedure TestCreateWithoutKey;
    procedure TestCreateWithKey;
    procedure TestCreateMultipleInstances;

    // –¢–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    procedure TestNullByteInToken;
    procedure TestUnicodeInToken;
    procedure TestMaxLengthToken;
  end;

  // –ú–æ–∫-–∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤

  { TMockSmartCaptcha }

  TMockSmartCaptcha = class(TSmartCaptcha)
  private
    FMockResponse: string;
    FMockStatusCode: Integer;
    FShouldThrowException: Boolean;
    FExceptionMessage: string;
  public
    procedure SetMockResponse(const AResponse: string; AStatusCode: Integer = 200);
    procedure SetMockException(const AMessage: string);
    function MakeRequest(const AToken, AIP: string): TJSONObject;
  end;

implementation

{ TSmartCaptchaTest }

procedure TSmartCaptchaTest.OnLogEvent(Sender: TObject; Level: TEventType; const Message: string);
begin
  FLogMessages.Add(Message);
  FLogLevels.Add(Level);
end;

procedure TSmartCaptchaTest.SetUp;
begin
  FClient := TSmartCaptcha.Create('test-server-key-12345');
  FLogMessages := TStringList.Create;
  FLogLevels := specialize TFPGList<TEventType>.Create;
  FClient.OnLog := @OnLogEvent;
end;

procedure TSmartCaptchaTest.TearDown;
begin
  FClient.Free;
  FLogMessages.Free;
  FLogLevels.Free;
end;

// –¢–µ—Å—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

procedure TSmartCaptchaTest.TestConfigValidation;
var
  aConfig: TSmartCaptchaConfig;
begin
  // –¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ –∫–ª—é—á–∞
  aConfig := TSmartCaptchaConfig.Create('');
  try
    AssertException(ESmartCaptchaConfigError, @aConfig.Validate);
  finally
    aConfig.Free;
  end;

  // –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º –∫–ª—é—á–æ–º
  aConfig := TSmartCaptchaConfig.Create('valid-key');
  try
    aConfig.Validate;
  finally
    aConfig.Free;
  end;
end;

procedure TSmartCaptchaTest.TestConfigWithValidKey;
var
  aConfig: TSmartCaptchaConfig;
begin
  aConfig := TSmartCaptchaConfig.Create('test-key-123');
  try
    AssertEquals('test-key-123', aConfig.ServerKey);
    AssertEquals(SMARTCAPTCHA_DEFAULT_URL, aConfig.BaseURL);
    AssertEquals(SMARTCAPTCHA_DEFAULT_CONNECT_TIMEOUT, aConfig.ConnectTimeout);
    AssertEquals(SMARTCAPTCHA_DEFAULT_IO_TIMEOUT, aConfig.IOTimeout);
  finally
    aConfig.Free;
  end;
end;

procedure TSmartCaptchaTest.TestConfigDefaults;
var
  aConfig: TSmartCaptchaConfig;
begin
  aConfig := TSmartCaptchaConfig.Create;
  try
    AssertEquals('', aConfig.ServerKey);
    AssertEquals(SMARTCAPTCHA_DEFAULT_URL, aConfig.BaseURL);
    AssertEquals(SMARTCAPTCHA_DEFAULT_CONNECT_TIMEOUT, aConfig.ConnectTimeout);
    AssertEquals(SMARTCAPTCHA_DEFAULT_IO_TIMEOUT, aConfig.IOTimeout);
  finally
    aConfig.Free;
  end;
end;

procedure TSmartCaptchaTest.TestConfigTimeouts;
var
  aConfig: TSmartCaptchaConfig;
begin
  aConfig := TSmartCaptchaConfig.Create('test-key');
  try
    // –¢–µ—Å—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–∞–π–º–∞—É—Ç–æ–≤
    aConfig.ConnectTimeout := -1;
    AssertException(ESmartCaptchaConfigError, @aConfig.Validate);

    aConfig.ConnectTimeout := SMARTCAPTCHA_DEFAULT_CONNECT_TIMEOUT;
    aConfig.IOTimeout := 0;
    AssertException(ESmartCaptchaConfigError, @aConfig.Validate);

    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–∞–π–º–∞—É—Ç–æ–≤
    aConfig.ConnectTimeout := 1000;
    aConfig.IOTimeout := 5000;
    aConfig.Validate;
  finally
    aConfig.Free;
  end;
end;

// –¢–µ—Å—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤

procedure TSmartCaptchaTest.TestEmptyToken;
begin
  AssertFalse(FClient.VerifyToken(''));
  AssertTrue(FClient.GetLastError.Contains('Token cannot be empty'));
end;

procedure TSmartCaptchaTest.TestWhitespaceToken;
begin
  AssertFalse(FClient.VerifyToken('   '));
  // –ü—Ä–æ–±–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é
end;

procedure TSmartCaptchaTest.TestVeryLongToken;
var
  aLongToken: string;
begin
  // –°–æ–∑–¥–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω (10KB)
  aLongToken := StringOfChar('a', 10240);
  // –¢–µ—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å, –Ω–æ —Ç–æ–∫–µ–Ω —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –±—É–¥–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º
  FClient.VerifyToken(aLongToken);
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –±—ã–ª —Å–¥–µ–ª–∞–Ω (–µ—Å—Ç—å –ª–æ–≥–∏)
  AssertTrue(FLogMessages.Count > 0);
end;

procedure TSmartCaptchaTest.TestSpecialCharactersInToken;
const
  SPECIAL_CHARS = '!@#$%^&*()_+-=[]{}|;:,.<>?`~';
begin
  // –¢–æ–∫–µ–Ω —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
  FClient.VerifyToken('token-with-' + SPECIAL_CHARS);
  // –î–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è (URL encoding)
  AssertTrue(FLogMessages.Count > 0);
end;

// –¢–µ—Å—Ç—ã IP –∞–¥—Ä–µ—Å–æ–≤

procedure TSmartCaptchaTest.TestWithValidIP;
begin
  FClient.VerifyToken('test-token', '192.168.1.1');
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ IP –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –≤ –∑–∞–ø—Ä–æ—Å
  AssertTrue(FLogMessages.Count > 0);
end;

procedure TSmartCaptchaTest.TestWithInvalidIP;
begin
  FClient.VerifyToken('test-token', '999.999.999.999');
  // –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP –±–µ–∑ –ø–∞–¥–µ–Ω–∏—è
  AssertTrue(FLogMessages.Count > 0);
end;

procedure TSmartCaptchaTest.TestWithEmptyIP;
begin
  FClient.VerifyToken('test-token', '');
  // –ü—É—Å—Ç–æ–π IP –¥–æ–ª–∂–µ–Ω –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
  AssertTrue(FLogMessages.Count > 0);
end;

procedure TSmartCaptchaTest.TestWithIPv6;
begin
  FClient.VerifyToken('test-token', '2001:db8::1');
  // IPv6 –∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è
  AssertTrue(FLogMessages.Count > 0);
end;

// –¢–µ—Å—Ç—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

procedure TSmartCaptchaTest.TestLoggingEnabled;
begin
  FClient.VerifyToken('test-token');
  // –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ª–æ–≥–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
  AssertTrue(FLogMessages.Count > 0);
  AssertTrue(FLogMessages.Text.Contains('verifying token'));
end;

procedure TSmartCaptchaTest.TestLoggingDisabled;
var
  aClient: TSmartCaptcha;
begin
  aClient := TSmartCaptcha.Create('test-key');
  try
    // –ë–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ª–æ–≥–æ–≤
    aClient.VerifyToken('test-token');
    // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    AssertTrue(True); // –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª, –µ—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
  finally
    aClient.Free;
  end;
end;

procedure TSmartCaptchaTest.TestDifferentLogLevels;
begin
  FClient.VerifyToken('');  // –í—ã–∑–æ–≤–µ—Ç Warning
  FClient.VerifyToken('test-token');  // –í—ã–∑–æ–≤–µ—Ç Debug –∏ Error

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–æ–≤
  AssertTrue(FLogLevels.Count > 0);
end;

// –¢–µ—Å—Ç—ã –æ—à–∏–±–æ–∫

procedure TSmartCaptchaTest.TestLastErrorInitialization;
begin
  // –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ –æ—à–∏–±–æ–∫ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ
  AssertEquals('', FClient.GetLastError);
end;

procedure TSmartCaptchaTest.TestLastErrorPersistence;
begin
  FClient.VerifyToken(''); // –í—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É
  AssertFalse('Must be not empty!', FClient.GetLastError.IsEmpty);

  // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –æ—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è
  FClient.VerifyToken('valid-token');
  // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏, –Ω–æ LastError —Å–±—Ä–æ—Å–∏—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ –º–µ—Ç–æ–¥–∞
end;

// –¢–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤

procedure TSmartCaptchaTest.TestCreateWithoutKey;
var
  aClient: TSmartCaptcha;
begin
  aClient := TSmartCaptcha.Create;
  try
    AssertEquals('', aClient.Config.ServerKey);
  finally
    aClient.Free;
  end;
end;

procedure TSmartCaptchaTest.TestCreateWithKey;
var
  aClient: TSmartCaptcha;
begin
  aClient := TSmartCaptcha.Create('my-server-key');
  try
    AssertEquals('my-server-key', aClient.Config.ServerKey);
  finally
    aClient.Free;
  end;
end;

procedure TSmartCaptchaTest.TestCreateMultipleInstances;
var
  aClient1, aClient2: TSmartCaptcha;
begin
  aClient1 := TSmartCaptcha.Create('key1');
  aClient2 := TSmartCaptcha.Create('key2');
  try
    AssertEquals('key1', aClient1.Config.ServerKey);
    AssertEquals('key2', aClient2.Config.ServerKey);
    AssertTrue(aClient1 <> aClient2);
  finally
    aClient1.Free;
    aClient2.Free;
  end;
end;

// –¢–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤

procedure TSmartCaptchaTest.TestNullByteInToken;
var
  aTokenWithNull: string;
begin
  aTokenWithNull := 'token' + #0 + 'with-null';
  // –ù–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ –ø–∞–¥–µ–Ω–∏—é
  FClient.VerifyToken(aTokenWithNull);
  AssertTrue(FLogMessages.Count > 0);
end;

procedure TSmartCaptchaTest.TestUnicodeInToken;
const
  UNICODE_TOKEN = '—Ç–æ–∫–µ–Ω-—Å-—é–Ω–∏–∫–æ–¥–æ–º-üîê-—Ç–µ—Å—Ç';
begin
  FClient.VerifyToken(UNICODE_TOKEN);
  // –î–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å Unicode
  AssertTrue(FLogMessages.Count > 0);
end;

procedure TSmartCaptchaTest.TestMaxLengthToken;
var
  aMaxToken: string;
begin
  // –¢–µ—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
  aMaxToken := StringOfChar('A', 4096);
  FClient.VerifyToken(aMaxToken);
  AssertTrue(FLogMessages.Count > 0);
end;

{ TMockSmartCaptcha }

procedure TMockSmartCaptcha.SetMockResponse(const AResponse: string; AStatusCode: Integer);
begin
  FMockResponse := AResponse;
  FMockStatusCode := AStatusCode;
  FShouldThrowException := False;
end;

procedure TMockSmartCaptcha.SetMockException(const AMessage: string);
begin
  FShouldThrowException := True;
  FExceptionMessage := AMessage;
end;

function TMockSmartCaptcha.MakeRequest(const AToken, AIP: string): TJSONObject;
begin

end;

initialization
  RegisterTest(TSmartCaptchaTest);

end.
